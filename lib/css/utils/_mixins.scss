@charset "utf-8";
/// Helper to clear inner floats
/// @author Nicolas Gallagher
/// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix
@mixin clearfix {
	&:before,
	&:after {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
}
@mixin clearafter {
	&:after {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
}
/// Helper to size an element
/// @author Hugo Giraudel
/// @param {Length} $width
/// @param {Length} $height
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}
@mixin linx($link, $visit, $hover, $active) {
	a {
		color: $link;
		&:visited { color: $visit; }
		&:hover { color: $hover; }
		&:active { color: $active; }
	}
}
// How to include mixin
// @include linx(white, blue, green, red);
@mixin text-ellipsis {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
	display: inline-block;
}
@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	-ms-border-radius: $radius;
	border-radius: $radius;
}
@mixin box-sizing($box-model) {
	-webkit-box-sizing: $box-model; // Safari <= 5
	-moz-box-sizing: $box-model; // Firefox <= 19
	box-sizing: $box-model;
}
@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}
/// Mixin to prefix several properties at once
/// @author Hugo Giraudel
/// @param {Map} $declarations - Declarations to prefix
/// @param {List} $prefixes (()) - List of prefixes to print
@mixin prefix($declarations, $prefixes: ()) {
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }

    // Output standard non-prefixed declaration
    #{$property}: $value;
  }
}
// Example
// .selector {
//   @include prefix((
//     column-count: 3,
//     column-gap: 1.5em,
//     column-rule: 2px solid hotpink
//   ), webkit moz);
// }

// @function calculateRem($size) {
//   $remSize: $size / 16px;
//   @return $remSize * 1rem;
// }

// @mixin font-size($size) {
//   font-size: $size;
//   font-size: calculateRem($size);
// }
@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .aspect-content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}
// Example
// .sixteen-nine {
//   @include aspect-ratio(16, 9);
// }
// Example
// <div class="sixteen-nine">
//   <div class="aspect-content">
//     insert content here // this will maintain a 16:9 aspect ratio
//   </div>
// </div>

/// Helper mixin to provide simple API to selector nesting
/// @param {String} $selector - Selector
@mixin when-inside($selector) {
  #{$selector} & {
    @content;
  }
}
// Example
// .foo {
//   display: block;
//   @include when-inside('.hnl') {
//     display: none;
//   }
// }

/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint) {
	// If the key exists in the map
	@if map-has-key($breakpoints, $breakpoint) {
	// Prints a media query based on the value
		@media only screen and #{inspect(map-get($breakpoints, $breakpoint))} {
			@content;
		}
	}
  // If the key doesn't exist in the map
	@else {
		@warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
		+ "Available breakpoints are: #{map-keys($breakpoints)}.";
	}
}

// p { @include font-size(1.3); }
// .foo { background: image('kit.png'); }

// Example
// .selector {
// 	color: red;
// 	@include respond-to('xs') {
// 		color: blue;
// 	}
// }
@mixin fr {
	font-family: 'Nanum Reg', sans-serif !important;
	font-weight: normal !important;
}
@mixin fb {
	font-family: 'Nanum Bold', sans-serif !important;
	font-weight: normal !important;
}
@mixin inbox {
	@include font-size(1.4);
	margin: 0;
	padding: 3px 5px 3px 5px;
	border: 1px solid $input-border;
	background: #fff;
	color: #333;
	line-height: 20px;
	height: 26px;
}
@mixin inbox-high {
	@include font-size(1.4);
	margin: 0;
	padding: 0 5px;
	border: 1px solid #c4c2c2;
	background: #fff;
	color: #333;
	line-height: 38px;
	height: 38px;
}
@mixin when-inside($selector) {
	#{$selector} & {
		@content;
	}
}
@mixin lh($height) {
	height: $height;
	line-height: $height;
}
@mixin squire($size) {
	height: $size;
	line-height: $size;
	width: $size;
}

// range selector mixin
@mixin select-range($start, $end){
	&:nth-child(n+#{$start}):nth-child(-n+#{$end}){
		@content;
	}
}
// mod query mixin
@mixin mod-list($mod, $remainder){
	&:nth-last-child(#{$mod}n+#{$remainder}):first-child,
	&:nth-last-child(#{$mod}n+#{$remainder}):first-child ~ li {
		@content;
	}
}
// example
// http://alistapart.com/article/using-css-mod-queries-with-range-selectors?utm_source=codropscollective
//li {
//	@include mod-list(3, 0){
//		@include select-range(3, 5){
//			// styles for items 3 to 5 in a list mod 3 remainder = 0
//		}
//	}
//}

@mixin linearGradient($top, $bottom){
	background: $top; /* Old browsers */
	background: -moz-linear-gradient(top,  $top 0%, $bottom 100%); /* FF3.6+ */
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$top), color-stop(100%,$bottom)); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(top,  $top 0%,$bottom 100%); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(top,  $top 0%,$bottom 100%); /* Opera 11.10+ */
	background: -ms-linear-gradient(top,  $top 0%,$bottom 100%); /* IE10+ */
	background: linear-gradient(to bottom,  $top 0%,$bottom 100%); /* W3C */
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#000000',GradientType=0 ); /* IE6-9 */
}
@mixin bg-gradient-l2r($start-colour, $end-colour) {
	background-color: $start-colour;
	background-image: -webkit-gradient(linear, left top, right top, from($start-colour), to($end-colour));
	background-image: -webkit-linear-gradient(left, $start-colour, $end-colour);
	background-image:    -moz-linear-gradient(left, $start-colour, $end-colour);
	background-image:     -ms-linear-gradient(left, $start-colour, $end-colour);
	background-image:      -o-linear-gradient(left, $start-colour, $end-colour);
	background-image:         linear-gradient(left, $start-colour, $end-colour);
	filter:            progid:DXImageTransform.Microsoft.gradient(start-colourStr='#{$start-colour}', end-colourStr='#{$end-colour}', gradientType='1');
}
@mixin bg-gradient-t2b($start-colour, $end-colour) {
	background-color: $start-colour;
	background-image: -webkit-gradient(linear, left top, left bottom, from($start-colour), to($end-colour));
	background-image: -webkit-linear-gradient(top, $start-colour, $end-colour);
	background-image:    -moz-linear-gradient(top, $start-colour, $end-colour);
	background-image:     -ms-linear-gradient(top, $start-colour, $end-colour);
	background-image:      -o-linear-gradient(top, $start-colour, $end-colour);
	background-image:         linear-gradient(top, $start-colour, $end-colour);
	filter:            progid:DXImageTransform.Microsoft.gradient(start-colourStr='#{$start-colour}', end-colourStr='#{$end-colour}');
}
@mixin linear-gradient($fromColor, $toColor) {
	background-color: $toColor; /* Fallback Color */
	background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor)); /* Saf4+, Chrome */
	background-image: -webkit-linear-gradient(top, $fromColor, $toColor); /* Chrome 10+, Saf5.1+, iOS 5+ */
	background-image:    -moz-linear-gradient(top, $fromColor, $toColor); /* FF3.6 */
	background-image:     -ms-linear-gradient(top, $fromColor, $toColor); /* IE10 */
	background-image:      -o-linear-gradient(top, $fromColor, $toColor); /* Opera 11.10+ */
	background-image:         linear-gradient(top, $fromColor, $toColor);
	filter:             progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='$fromColor', EndColorStr='$toColor');
}
@mixin linearGradient($top, $bottom){
	background: $top; /* Old browsers */
	background: -moz-linear-gradient(top,  $top 0%, $bottom 100%); /* FF3.6+ */
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$top), color-stop(100%,$bottom)); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(top,  $top 0%, $bottom 100%); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(top,  $top 0%, $bottom 100%); /* Opera 11.10+ */
	background: -ms-linear-gradient(top,  $top 0%, $bottom 100%); /* IE10+ */
	background: linear-gradient(to bottom,  $top 0%, $bottom 100%); /* W3C */
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$top}', endColorstr='#{$bottom}',GradientType=0 ); /* IE6-9 */
}

@mixin hidden {
	position:absolute;
	left:-10000px;
	top:auto;
	width:1px;
	height:1px;
	overflow:hidden;
}
